openapi: 3.0.0
info:
  title: Taxarific Users API
  version: 1.0.0
servers:
  - url: Localhost:8080
tags:
  - name: users
    description: Customers that have signed up for taxarific.
  - name: admin
    description: Admins that have full access.
  - name: employee
    description: Able to take on user cases and fill out the information based on what the user submitted via pictures.
  - name: case
    description: Information that the employee will fill out based on the user's pictures.
paths:
  /login:
    post:
      summary: Login a user, employee, or admin
      description: Login a user that has signed up for taxarific.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - email
                - password
              properties:
                role:
                  type: string
                  description: User, Employee, or Admin
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        "200":
          description: User logged in successfully.
          content:
            application/json:
              schema:
                properties:
                  token:
                    type: string
                    description: JWT token
        "404":
          description: User not found.
  /user:
    get:
      tags:
        - users
      summary: Get all users
      description: Get all users that have signed up for taxarific.
      responses:
        "200":
          description: A list of all users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserResponse"
    post:
      tags:
        - users
      summary: Create a user
      description: Create a user that has signed up for taxarific.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        "201":
          description: User created successfully.
          content:
            application/json:
              schema:
                properties:
                  token:
                    type: string
                    description: JWT token
  /user/profile:
    get:
      tags:
        - users
      summary: Get a user
      description: Get a user that has signed up for taxarific. Gets user through the JWT token.
      responses:
        "200":
          description: User found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          description: User not found.
    put:
      tags:
        - users
      summary: Update a user
      description: Update a user that has signed up for taxarific. Gets user through the JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        "201":
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          description: User not found.
  /user/case:
    put:
      tags:
        - user
      summary: Allows users to submit a case
      description: Submit a case that the employee will take on. Gets the user through the JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - case
              properties:
                case:
                  type: object
                  $ref: "#/components/schemas/Case"
      responses:
        "201":
          description: Case submitted successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Case"
  /case:
    get:
      tags:
        - case
      summary: Get all cases
      description: Get all cases that have been submitted by users.
      responses:
        "200":
          description: A list of all cases.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Case"
  /case/pending:
    get:
      tags:
        - case
      summary: Get all pending cases
      description: Get all cases that are pending for employees to take on.
      responses:
        "200":
          description: A list of all pending cases.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Case"
  /employee:
    get:
      tags:
        - employee
      summary: Get all employees
      description: Get all employees that are able to take on user cases.
      responses:
        "200":
          description: A list of all employees.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EmployeeResponse"
  /employee/addcase/{caseid}:
    put:
      tags:
        - employee
        - case
      summary: Allows Employees to update certain information
      description: Update an employee that is able to take on user cases.
      parameters:
        - name: caseid
          in: path
          description: ID of case that employee wises to take on.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - case
              properties:
                case:
                  type: object
                  $ref: "#/components/schemas/Case"
      responses:
        "200":
          description: Employee updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
        "404":
          description: Employee not found.
  /admin:
    get:
      tags:
        - admin
      summary: Get all admins
      description: Get all admins that have full access.
      responses:
        "200":
          description: A list of all admins.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      tags:
        - admin
      summary: Create an admin
      description: Create an admin that has full access.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        "201":
          description: Admin created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"
  /admin/employee:
    post:
      tags:
        - admin
      summary: Create an employee
      description: Create an employee that is able to take on user cases.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        "201":
          description: Employee created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: string
          x-go-type: primitive.ObjectID
          x-go-type-import:
            path: go.mongodb.org/mongo-driver/bson/primitive
          x-oapi-codegen-extra-tags:
            bson: _id, omitempty
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        case:
          type: object
          $ref: "#/components/schemas/Case"
    Employee:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: string
          x-go-type: primitive.ObjectID
          x-go-type-import:
            path: go.mongodb.org/mongo-driver/bson/primitive
          x-oapi-codegen-extra-tags:
            bson: _id, omitempty
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        cases:
          type: array
          items:
            properties:
              case_id:
                type: string
    Case:
      type: object
      required:
        - user_id
      properties:
        case_id:
          type: string
        case_status:
          type: string
        case_description:
          type: string
    Admin:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: string
          x-go-type: primitive.ObjectID
          x-go-type-import:
            path: go.mongodb.org/mongo-driver/bson/primitive
          x-oapi-codegen-extra-tags:
            bson: _id, omitempty
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          x-oapi-codegen-extra-tags:
    UserResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
    AdminResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
    EmployeeResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        cases:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/Case"
