// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all admins
	// (GET /admin)
	GetAdmin(c *gin.Context)
	// Create an admin
	// (POST /admin)
	PostAdmin(c *gin.Context)
	// Create an employee
	// (POST /admin/employee)
	PostAdminEmployee(c *gin.Context)
	// Get all cases
	// (GET /case)
	GetCase(c *gin.Context)
	// Get all pending cases
	// (GET /case/pending)
	GetCasePending(c *gin.Context)
	// Get all employees
	// (GET /employee)
	GetEmployee(c *gin.Context)
	// Allows Employees to update certain information
	// (PUT /employee/addcase/{caseid})
	PutEmployeeAddcaseCaseid(c *gin.Context, caseid string)
	// Login a user, employee, or admin
	// (POST /login)
	PostLogin(c *gin.Context)
	// Get all users
	// (GET /user)
	GetUser(c *gin.Context)
	// Create a user
	// (POST /user)
	PostUser(c *gin.Context)
	// Allows users to submit a case
	// (PUT /user/case)
	PutUserCase(c *gin.Context)
	// Get a user
	// (GET /user/profile)
	GetUserProfile(c *gin.Context)
	// Update a user
	// (PUT /user/profile)
	PutUserProfile(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAdmin operation middleware
func (siw *ServerInterfaceWrapper) GetAdmin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAdmin(c)
}

// PostAdmin operation middleware
func (siw *ServerInterfaceWrapper) PostAdmin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAdmin(c)
}

// PostAdminEmployee operation middleware
func (siw *ServerInterfaceWrapper) PostAdminEmployee(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAdminEmployee(c)
}

// GetCase operation middleware
func (siw *ServerInterfaceWrapper) GetCase(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCase(c)
}

// GetCasePending operation middleware
func (siw *ServerInterfaceWrapper) GetCasePending(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCasePending(c)
}

// GetEmployee operation middleware
func (siw *ServerInterfaceWrapper) GetEmployee(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEmployee(c)
}

// PutEmployeeAddcaseCaseid operation middleware
func (siw *ServerInterfaceWrapper) PutEmployeeAddcaseCaseid(c *gin.Context) {

	var err error

	// ------------- Path parameter "caseid" -------------
	var caseid string

	err = runtime.BindStyledParameterWithOptions("simple", "caseid", c.Param("caseid"), &caseid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter caseid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutEmployeeAddcaseCaseid(c, caseid)
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostLogin(c)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c)
}

// PostUser operation middleware
func (siw *ServerInterfaceWrapper) PostUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUser(c)
}

// PutUserCase operation middleware
func (siw *ServerInterfaceWrapper) PutUserCase(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutUserCase(c)
}

// GetUserProfile operation middleware
func (siw *ServerInterfaceWrapper) GetUserProfile(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserProfile(c)
}

// PutUserProfile operation middleware
func (siw *ServerInterfaceWrapper) PutUserProfile(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutUserProfile(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/admin", wrapper.GetAdmin)
	router.POST(options.BaseURL+"/admin", wrapper.PostAdmin)
	router.POST(options.BaseURL+"/admin/employee", wrapper.PostAdminEmployee)
	router.GET(options.BaseURL+"/case", wrapper.GetCase)
	router.GET(options.BaseURL+"/case/pending", wrapper.GetCasePending)
	router.GET(options.BaseURL+"/employee", wrapper.GetEmployee)
	router.PUT(options.BaseURL+"/employee/addcase/:caseid", wrapper.PutEmployeeAddcaseCaseid)
	router.POST(options.BaseURL+"/login", wrapper.PostLogin)
	router.GET(options.BaseURL+"/user", wrapper.GetUser)
	router.POST(options.BaseURL+"/user", wrapper.PostUser)
	router.PUT(options.BaseURL+"/user/case", wrapper.PutUserCase)
	router.GET(options.BaseURL+"/user/profile", wrapper.GetUserProfile)
	router.PUT(options.BaseURL+"/user/profile", wrapper.PutUserProfile)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY32/bNhD+VwhuwF5ky936UPgta4sgw4AFW4s9FEFBS2eZrUSqJOXECPS/DzxRNG3R",
	"ip02PwbkJVAoUnf87ru773xLM1nVUoAwms5vqc5WUDF8PMsrLuxDrWQNynDAZagYL+3DUqqKGTp3Kwk1",
	"mxronGqjuChom1Ce2327ywm9mRRy4hZrxStu+Bqmfy2+QGYu3oUbJryqpTLoAzMrOqeFnFZSFDJfTKUq",
	"Unye5IqvQaULLUXqP2jt30wkq/kkkzkUICZwYxSbGFbgPex2OqefeZ4QWXEDVW02tG0TKlgFQ8fbhNZM",
	"62upDtxqxNaXzlZopk2ogm8NV5DT+ScLlTOcODyvPKASobEOvGUahhHJmIbPOehM8dpwKaK+46ZYQPp3",
	"2jDT6Mj7PU8bDcp+KObf+6ou5QYO+IgPFgF94A5R96x9t8SUYhtr54WDT8fBPsZ/g66l0EfF+mcFSzqn",
	"P6XbYpO6SpMip8difFRID0PWRu7wUYN6qWzPiVU2IocZ9XBcsEtcLCVu5qa07z6wG6b4kmfEeqXJ2eUF",
	"TegalMbiSl9NZ9OZtSJrEKzmdE5/w6UEg4kep6zvngVgmHfqMz0HQ1hZEtyliVkxQ1ZsDWTZ2NUsA62n",
	"FC0oZs9c5N2prilbhDus0NivsxnmnRQGBFpjdV3yDE+mXYj61n50XmKODPLS4rV7lTNScm2IXAYXmiLU",
	"uqkqpjaD69qEQvp8oh1KV5aBUkdwequAGSBMdEd7oPQ4TpdSB0B9a0Cb32W+OQmje5eGe+TYfsrsZEtw",
	"8GovuYxqoB1w4dVJ9xyjQIdhLOYYjAyDkxPdYBxsSDb7kd8LYCT0beKSJYVQPdxBh35vxwiuCVuUQIwk",
	"hn0FIgWxMoVgJxrhh9crLzz5Hp54GCNU6d+dyBbYRiZGmMwJ4dHiitEPausCQBDdLCpurCOLDZIkXmdR",
	"lTxGmY3Ln7vKrCN2vMp2+msLHIK1xS2tQeSWTifgxxQQd4wspfLh0UHKHcTx0tl7vnD2VxuFdWdTHN6w",
	"go1CG+DXw3tKATsHs1O6HhrVgeY/GWF/4UPo+g0Bsh7OXXRTludI5Fv7l+ct1uEmAvfHOv8h/aLxcJ91",
	"pt+iYay5ilVgQFmH981fvLPXt/s7s96Ja64HqWPVYjcM9L2BZr2V3VKeBOHbbxBXP6qT9RX27mTba0p9",
	"OhzRgWaP24EaZMOgAyX09ez1kDv+mJCGLGUj8n3qnpWlvNbkfVgLOxskA2UYF8SOFlYI2E9GeJ2ExaOU",
	"hfu9Lap9/rSvCeuI6nWw5oWAnDQ1lmXTTy5xzYOfeAqtMyJpEqpkCZHU1aASj21CpCK9pB8XRfdUQ7Pv",
	"QMLIryCGV/jj3w+kezX0OcJTe2NSyqKAnHBxJEvx0EGGhpxJfPlBMJnT9glNG/dryGjHQqkUiKmjiXcO",
	"BkfJx5pZ79+jnBqM9yd8GeRw9//dk+v35KvH7WU0eZJkPGVkwThH+NEnmB9ZokLlH5xKCAvEgllBKBjK",
	"0osFcg5G43vHLSWbYoUL/pZREWMv5Qeb/4tI+HFjqvNkEGu7HsyFY9F2Ld8VQ+lOubjtRT8Mfq3kkpd3",
	"zAVHloou/KeE3pXgS+fEA+qw3QJ8IK36VnWvlrZFKl6Mx8aABwPY5VYI8PNRWO0jp9lRHDhNi49TYie8",
	"sRJsd4Na90Nao0rURhkrV1Kb+ZvZmxm1k5M7OGjljTayOlr+uOGts94mt7HfTkd+8nfHnT4bHj84txIm",
	"crK0jUI2XfsIpg+yYBpye+C6by54clv21pyRmmemURD64WeVoSsXwecPtCzvjjffW/5Fx6xhGW2v2v8C",
	"AAD//z9NZfuXIAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
