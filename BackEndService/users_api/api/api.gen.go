// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all admins
	// (GET /admin)
	GetAdmin(c *gin.Context)
	// Create an admin
	// (POST /admin)
	PostAdmin(c *gin.Context)
	// Create an employee
	// (POST /admin/employee)
	PostAdminEmployee(c *gin.Context)
	// Get all employees
	// (GET /employee)
	GetEmployee(c *gin.Context)
	// Allows Employees to update certain information
	// (PUT /employee/{employeeid})
	PutEmployeeEmployeeid(c *gin.Context, employeeid string)
	// Get all users
	// (GET /user)
	GetUser(c *gin.Context)
	// Create a user
	// (POST /user)
	PostUser(c *gin.Context)
	// Update a user
	// (PUT /user/{userid})
	PutUserUserid(c *gin.Context, userid string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAdmin operation middleware
func (siw *ServerInterfaceWrapper) GetAdmin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAdmin(c)
}

// PostAdmin operation middleware
func (siw *ServerInterfaceWrapper) PostAdmin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAdmin(c)
}

// PostAdminEmployee operation middleware
func (siw *ServerInterfaceWrapper) PostAdminEmployee(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAdminEmployee(c)
}

// GetEmployee operation middleware
func (siw *ServerInterfaceWrapper) GetEmployee(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEmployee(c)
}

// PutEmployeeEmployeeid operation middleware
func (siw *ServerInterfaceWrapper) PutEmployeeEmployeeid(c *gin.Context) {

	var err error

	// ------------- Path parameter "employeeid" -------------
	var employeeid string

	err = runtime.BindStyledParameterWithOptions("simple", "employeeid", c.Param("employeeid"), &employeeid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter employeeid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutEmployeeEmployeeid(c, employeeid)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c)
}

// PostUser operation middleware
func (siw *ServerInterfaceWrapper) PostUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUser(c)
}

// PutUserUserid operation middleware
func (siw *ServerInterfaceWrapper) PutUserUserid(c *gin.Context) {

	var err error

	// ------------- Path parameter "userid" -------------
	var userid string

	err = runtime.BindStyledParameterWithOptions("simple", "userid", c.Param("userid"), &userid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutUserUserid(c, userid)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/admin", wrapper.GetAdmin)
	router.POST(options.BaseURL+"/admin", wrapper.PostAdmin)
	router.POST(options.BaseURL+"/admin/employee", wrapper.PostAdminEmployee)
	router.GET(options.BaseURL+"/employee", wrapper.GetEmployee)
	router.PUT(options.BaseURL+"/employee/:employeeid", wrapper.PutEmployeeEmployeeid)
	router.GET(options.BaseURL+"/user", wrapper.GetUser)
	router.POST(options.BaseURL+"/user", wrapper.PostUser)
	router.PUT(options.BaseURL+"/user/:userid", wrapper.PutUserUserid)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXTW/bOBP+KwTf9yhb7m4PhW/ZtigCLLDFYnMqgoCWxja7EsmSQyfeQP99wdFHJIt2",
	"7DQfLTYXg6aGHPJ5Zp4Z3vJMl0YrUOj4/Ja7bA2loOFZXkoVBsZqAxYl0HRmQSDkVwLDv6W2ZRjxXCBM",
	"UJbAE45bA3zOHVqpVrxKOJRCFgPzeiZiKvNgN5xO+M1kpSfNpLGylCg3MP1j8RUyPP/QN5jI0mhLZzMC",
	"13zOV3paarXS+WKq7Sql8SS3cgM2XTit0m7D4P9mooWRk0znsAI1gRu0YoJiRXcP5nzOr2Se6FIilAa3",
	"vKoSrkQJ43NXCfcmPxGtKuEWvnlpIefzLwGPZvukA80I5661zfllt1oTFMEj0fYnOKOVg990vn2l8AUo",
	"HNHyXjiIMCEcXOXgMisNSq2iByCjGtTOu/cUGHFbhwK9i+/1AOpPByDh3oE97sw78d4ujIX2x9IUegt7",
	"cKRBYJQG/7ew5HP+v/RO39JG3FLi4o4kYa3YPhSc17x4Pmlr+b9H3V5j4SfVyAsHdsynyHMLbo+cSdw+",
	"ms79d+nrsi76ca0VDGCpZyKwhMLzWAGS8H+kiez1vSISguywgLwG3NMH3A8XUztxEqakWmoylliEb3+J",
	"G2HlUmYsxJBjZ5/PecI3YB11bvzNdDadBSfagBJG8jn/laYSwpygSkX7qloBHXvQ/PFPgEwUBSMrx3At",
	"kK3FBtjSh9ksA+emnDxYEdac5/Wq+rEWUqOObHL2y2xGBVErBEXehDGFzGhl+tXV/WZdCY8umKP8GRXP",
	"gN3wWmeskA6ZXvYuNyXYnS9LYbejqwfuKLq+8BqxyxA12kUwe0+Zx4Sql7agucOYfdauB9o3Dw5bNTga",
	"r0Mw1XtXQ7lC66EakfTmcZ0OyYmQQSg1esWcJ4ACVttdSnaQjXBSJU1Ep9Dvze/hqbWtqZKOiUUBDDVD",
	"8TcwrVh4BDDq4w4Q170GnobAbvtn5jDa5EZobO1OZBLuUIuR2afxoEK1ho1ICQsnsfgJcMDfU6tWHNVT",
	"lau79D7x6gx68HaQDhFOb9uRzCvKGh+B+4Jq3Pcnje/g/th5pbpkRQkINpx01/f5h3BvXEPPt2Z11Q0u",
	"Qh2ru4m20nPobz7MmaRH2W75vfwRUnj2cincdDK7KZzwt7O345jolimNbKm9ynfD8awo9LVjH+9ytOWN",
	"ZWBRSMVCcxMaprDl3lj1zYPsoBJ4aobuWhUnVwpy5g1basuwbZqiGkAvvp+ja6Fr7st7+tjDsf5/f89S",
	"J23XsRwNXSiCHXaPnzi09TPXvTFDY0YuSOJOqHeEb4SXNrjT2/B7jAA/mClPRF2Qm+MVt/Z2j9r6dtMX",
	"V9rjA2b2/AFzmrrSkr3KOgiHWGAFa7Cbll9vCz7nv+tMFGvtcP5u9m7GAwvNwpEweIe6PFpQe4HgeJXc",
	"xlr9A8/IZnndAEaW7+0wmFA5W8qiYNojBWyvnrCFcJCHBdfBcRfOzi9KiYGJjRTMyAy9hf45uuozPsp7",
	"rVAK5VgJaGXmCApjdQm4Bt/fpDHg1WX1bwAAAP///zcAmt0cAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
