// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all admins
	// (GET /admin)
	GetAdmin(c *gin.Context)
	// Create an admin
	// (POST /admin)
	PostAdmin(c *gin.Context)
	// Create an employee
	// (POST /admin/employee)
	PostAdminEmployee(c *gin.Context)
	// Get all cases
	// (GET /case)
	GetCase(c *gin.Context)
	// Get all pending cases
	// (GET /case/pending)
	GetCasePending(c *gin.Context)
	// Get all employees
	// (GET /employee)
	GetEmployee(c *gin.Context)
	// Allows Employees to update certain information
	// (PUT /employee/addcase/{caseid})
	PutEmployeeAddcaseCaseid(c *gin.Context, caseid string)
	// Login a user, employee, or admin
	// (POST /login)
	PostLogin(c *gin.Context)
	// Get all users
	// (GET /user)
	GetUser(c *gin.Context)
	// Create a user
	// (POST /user)
	PostUser(c *gin.Context)
	// Allows users to submit a case
	// (PUT /user/case)
	PutUserCase(c *gin.Context)
	// Get a user
	// (GET /user/profile)
	GetUserProfile(c *gin.Context)
	// Update a user
	// (PUT /user/profile)
	PutUserProfile(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAdmin operation middleware
func (siw *ServerInterfaceWrapper) GetAdmin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAdmin(c)
}

// PostAdmin operation middleware
func (siw *ServerInterfaceWrapper) PostAdmin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAdmin(c)
}

// PostAdminEmployee operation middleware
func (siw *ServerInterfaceWrapper) PostAdminEmployee(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAdminEmployee(c)
}

// GetCase operation middleware
func (siw *ServerInterfaceWrapper) GetCase(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCase(c)
}

// GetCasePending operation middleware
func (siw *ServerInterfaceWrapper) GetCasePending(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCasePending(c)
}

// GetEmployee operation middleware
func (siw *ServerInterfaceWrapper) GetEmployee(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEmployee(c)
}

// PutEmployeeAddcaseCaseid operation middleware
func (siw *ServerInterfaceWrapper) PutEmployeeAddcaseCaseid(c *gin.Context) {

	var err error

	// ------------- Path parameter "caseid" -------------
	var caseid string

	err = runtime.BindStyledParameterWithOptions("simple", "caseid", c.Param("caseid"), &caseid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter caseid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutEmployeeAddcaseCaseid(c, caseid)
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostLogin(c)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c)
}

// PostUser operation middleware
func (siw *ServerInterfaceWrapper) PostUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUser(c)
}

// PutUserCase operation middleware
func (siw *ServerInterfaceWrapper) PutUserCase(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutUserCase(c)
}

// GetUserProfile operation middleware
func (siw *ServerInterfaceWrapper) GetUserProfile(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserProfile(c)
}

// PutUserProfile operation middleware
func (siw *ServerInterfaceWrapper) PutUserProfile(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutUserProfile(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/admin", wrapper.GetAdmin)
	router.POST(options.BaseURL+"/admin", wrapper.PostAdmin)
	router.POST(options.BaseURL+"/admin/employee", wrapper.PostAdminEmployee)
	router.GET(options.BaseURL+"/case", wrapper.GetCase)
	router.GET(options.BaseURL+"/case/pending", wrapper.GetCasePending)
	router.GET(options.BaseURL+"/employee", wrapper.GetEmployee)
	router.PUT(options.BaseURL+"/employee/addcase/:caseid", wrapper.PutEmployeeAddcaseCaseid)
	router.POST(options.BaseURL+"/login", wrapper.PostLogin)
	router.GET(options.BaseURL+"/user", wrapper.GetUser)
	router.POST(options.BaseURL+"/user", wrapper.PostUser)
	router.PUT(options.BaseURL+"/user/case", wrapper.PutUserCase)
	router.GET(options.BaseURL+"/user/profile", wrapper.GetUserProfile)
	router.PUT(options.BaseURL+"/user/profile", wrapper.PutUserProfile)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZ32/bNhD+VwhuwF5ky936UPgtS4sgw4AFW4s9FEFBS2eZrUSqJOXECPS/DzxRMmXR",
	"ip2fK+CXVhVJ3fG77+6+c+9oIotSChBG0/kd1ckKCoaPZ2nBhX0olSxBGQ74GgrGc/uwlKpghs7dm4ia",
	"TQl0TrVRXGS0jihP7b7+64jeTjI5cS9LxQtu+Bqmfy2+QmIu3/sbJrwopTLoAzMrOqeZnBZSZDJdTKXK",
	"YnyepIqvQcULLUXcfdDav51IVvJJIlPIQEzg1ig2MSzDe9jtdE6/8DQisuAGitJsaF1HVLACho7XES2Z",
	"1jdS7bnVXluiynP7XQXfK64gpfPPFhpnKHL4XXcASoTCGjxnGoYRSJiGLynoRPHScCmCvuKmUADaNW2Y",
	"qXRgfcfTSoOyHwr596Eoc7mBPT7igwVWD9fbrx7Pj9o66JaZUmxjHTmRMr0/kodxro3p36BLKfQptq8W",
	"2zoQnU8aVDgi9u+fFSzpnP4Ub4t67Cp6jLXklCpPmSo2GPvT5MTbDir7ioulxM3c5HbtI7tlii95QiyM",
	"mpxdXdKIrkFpbGn0zXQ2nVnnZAmClZzO6W/4KsI7omsxazVKBnj7XlekF2AIy3OCuzQxK2bIiq2BLCv7",
	"NklA6ylFC4rZM5dpc6qRPpYSTXDR2K+zGeaaFAYEWmNlmfMET8ZfddOIm3TrVcexrMR8HhQ9i1f/Kmck",
	"59oQufQuNEWodVUUTG0G17U8wwh+pg1K1zYDpA7gdK6AGSBMNEdboPQ4TldSe0B9r0Cb32W6OQqjB2fM",
	"E+R4L729g9d1f6dRFdQDLrw56p5jFGgwDMUcg5FgcFKiK4yDDclmN/I7AQyEvo5cssTga7Z76NDubRjB",
	"NWGLHIiRxLBvQKQgttUT1AMj/OhU4oknj+FJB2OAKu3akWyBbWRChGllxWhxxeh7tXUBIIiuFgU31pHF",
	"BkkSrrOoSV6izLbi57gy64gdrrKNCt4Ch2BtcYtLEKml0xH4MQXEHSNLqbrwaC/l9uJ45ez9f+FsrzYK",
	"a29TGF6/go1C6+HXwntMAbsA0ytdz43qYPI6GuHuwvvQ7TZ4yHZw9tGNWZoike/snzytsQ5XAbg/lemT",
	"9Iuqg/usMX2OhrHmKlaAAWUd3jV/+d5e3+5vzHZO3HA9SB2rFhuN3PYGmrRW+qU88sK32yCun6qTHT64",
	"7TSlNh0O6ECzl+1AFbJh0IEi+nb2dsid7piQhixlJdJd6p7lubzR5INfCxsbJAFlGBfEjhZWCNhPBngd",
	"+cUjl5n7VTOoff60y4Q1RO10sOaZgJRUJZZl004uYc2Dn3gNrTMiaSKqZA6B1NWgog7biEhFWkk/Looe",
	"qIZmj0DCyG8ghlf449+PpFka+hzgqb0xyWWWQUq4OJCleGgvQ33ORF35QTCZ0/YRjSv3y81ox0Kp5Imp",
	"g4l3AQZHyZeaWR/eo5waDPcnXPRyuPn3/ZPrY/K1w+00mrxKMh4zsmCcA/xoE6wbWYJC5R+cSgjzxIJZ",
	"gS8Y8rwTC+QCjMZ1xy0lq2yFL7pbBkWMvVQ32PwoIuHpxlTnySDW9r03F45F27V8VwylO+XithN9P/il",
	"kkue3zMXHFgqmvAfE3pXgq+cE8+ow/oFeE9ata3qQS1ti1S4GI+NAc8GsMstH+AfoWS/cP4dRI7jRPo4",
	"V3pxD9VmuxvUup3eKpWjaEpYvpLazN/N3s2oHancwUGPr7SRxcG6yE11jfU6ugv9qDryfwHuuBNuw+N7",
	"B1rCREqWtoPIqukr3lhCFkxDag/ctF0HT27r4ZozUvLEVAp8P7ohZujKpff5Pb2sc6cz31r+RYesYX2t",
	"r+v/AgAA//+pmS1hFiIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
