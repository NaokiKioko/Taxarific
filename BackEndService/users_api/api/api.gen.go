// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all admins
	// (GET /admin)
	GetAdmin(c *gin.Context)
	// Get all users
	// (GET /user)
	GetUser(c *gin.Context)
	// Update a user
	// (PUT /user/{id})
	PutUserId(c *gin.Context, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAdmin operation middleware
func (siw *ServerInterfaceWrapper) GetAdmin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAdmin(c)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c)
}

// PutUserId operation middleware
func (siw *ServerInterfaceWrapper) PutUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutUserId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/admin", wrapper.GetAdmin)
	router.GET(options.BaseURL+"/user", wrapper.GetUser)
	router.PUT(options.BaseURL+"/user/:id", wrapper.PutUserId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RVTW8bOQz9K4J2j4bt3c0hmJs3BQoDBZpDgx6CHOgRx6N09FGRcuoG898Lauz4o1M4",
	"RU49WaZIPum9J86zroOLwaNn0tWzprpFB2V5R5g+W25D5lsgegrJfEw3CYHRLFgyYgoRE1ss+WBMQipL",
	"3kbUlSZO1q91P9G15e34Rsie0/geOrCd7DQhOWBd7SKTn1OtOcnL2ZqxNA8OR6FiGzyetBgiIz2Igceb",
	"fLdxJN6/9AirR6xZ9xKyvgkl2XIne5/gGyTb2FoJ7aQWt0s90RtMZIPXlf5nOp/OBSRE9BCtrvR/JTTR",
	"EbgtrM/AOOtltcaij0Gqk408tHiPrKDrVMkixS2wamGDqskSrWskmuqCkEBqlmaoWpS2E52QYvA0qP3v",
	"fC4/dfCMvqBBjJ2tS+XskYI/2ElWltGVwr8TNrrSf80OxpvtXDe7YLkDlZASbAcmTy+5UJ0lVqE5uuq0",
	"iEDZORCnnREhGsOadHWvB/4eJHuWCdNFKnPR6sAk2bVHo3JUTUiK95qOsip3/SNJLZf+Fadl84jS4f+B",
	"0tmzNX2ZHXmE17togFFBabPnlV5P620utC5NeRYJHLLAV/fnQMt3chtucYcUVC7Q0lKeUHlUej8wdJkm",
	"Cb9mm9DoilPGyZEMF+ZO/zAUI/H/wWx/S+G3CCuknx66f6Pf3nqaM7WF+oF3oyiXASSzaDsVU17Nr0YM",
	"IiU+sGpC9ubchCf2GTOhZGPa7D2RU6cr/SHU0LWBuLqeX8+1qLUrPEe/ycTBvfrJ78wzoPeT826LC3N4",
	"Vz4MpZHyVYdiXIYvqIIfjFwDISnwRjW261TIXEwuXxuxqA1erYDQSMGTAL88AcorZ1mU2FhQ0dacEx6f",
	"A13swhZx5Cg3wbMFT8ohJ1tToSKm4JBbzMdNdgm6f+h/BAAA//90Go0SeggAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
