// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all admins
	// (GET /admin)
	GetAdmin(c *gin.Context)
	// Create an admin
	// (POST /admin)
	PostAdmin(c *gin.Context)
	// Create an employee
	// (POST /admin/employee)
	PostAdminEmployee(c *gin.Context)
	// Get all employees
	// (GET /employee)
	GetEmployee(c *gin.Context)
	// Allows Employees to update certain information
	// (PUT /employee/{employeeid})
	PutEmployeeEmployeeid(c *gin.Context, employeeid string)
	// Get all users
	// (GET /user)
	GetUser(c *gin.Context)
	// Create a user
	// (POST /user)
	PostUser(c *gin.Context)
	// Update a user
	// (PUT /user/{userid})
	PutUserUserid(c *gin.Context, userid string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAdmin operation middleware
func (siw *ServerInterfaceWrapper) GetAdmin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAdmin(c)
}

// PostAdmin operation middleware
func (siw *ServerInterfaceWrapper) PostAdmin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAdmin(c)
}

// PostAdminEmployee operation middleware
func (siw *ServerInterfaceWrapper) PostAdminEmployee(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAdminEmployee(c)
}

// GetEmployee operation middleware
func (siw *ServerInterfaceWrapper) GetEmployee(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEmployee(c)
}

// PutEmployeeEmployeeid operation middleware
func (siw *ServerInterfaceWrapper) PutEmployeeEmployeeid(c *gin.Context) {

	var err error

	// ------------- Path parameter "employeeid" -------------
	var employeeid string

	err = runtime.BindStyledParameterWithOptions("simple", "employeeid", c.Param("employeeid"), &employeeid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter employeeid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutEmployeeEmployeeid(c, employeeid)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c)
}

// PostUser operation middleware
func (siw *ServerInterfaceWrapper) PostUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUser(c)
}

// PutUserUserid operation middleware
func (siw *ServerInterfaceWrapper) PutUserUserid(c *gin.Context) {

	var err error

	// ------------- Path parameter "userid" -------------
	var userid string

	err = runtime.BindStyledParameterWithOptions("simple", "userid", c.Param("userid"), &userid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutUserUserid(c, userid)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/admin", wrapper.GetAdmin)
	router.POST(options.BaseURL+"/admin", wrapper.PostAdmin)
	router.POST(options.BaseURL+"/admin/employee", wrapper.PostAdminEmployee)
	router.GET(options.BaseURL+"/employee", wrapper.GetEmployee)
	router.PUT(options.BaseURL+"/employee/:employeeid", wrapper.PutEmployeeEmployeeid)
	router.GET(options.BaseURL+"/user", wrapper.GetUser)
	router.POST(options.BaseURL+"/user", wrapper.PostUser)
	router.PUT(options.BaseURL+"/user/:userid", wrapper.PutUserUserid)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXS28bNxD+KwTb4+qRNodANzcxAgMFmkN9CgyD2h1JTHc5DDmUrRr73wvOPrQrrWTJ",
	"sd0EyMWguDMc8vvm8flBplhYNGDIy9mD9OkKCsXLi6zQJi6sQwuONPB26kARZLeK4q8FuiKuZKYIRqQL",
	"kImkjQU5k56cNktZJhIKpfOeebUzYKqzaNffTuT9aImjetM6XWjSaxj/Nf8CKV196BqMdGHR8d2sopWc",
	"ySWOCzRLzOZjdMsJr0eZ02twk7lHM2kPjPHvR6isHqWYwRLMCO7JqRGpJb89msuZvNVZgoUmKCxtZFkm",
	"0qgC9u9dJtIq7+/QHXjUkVBfqlD9MMFmZ2JfJtLB16AdZHL2OaJbXzZpKWiveNN6IwMb7/9eeRjIAeXh",
	"NgOfOm1Joxl8OhtVdLY3DYFvMGzrSVHww2c9IenOByuRwYM77c47wDaOQxheFjbHDRzAkReRZF786mAh",
	"Z/KXybYsJ3VNTpiLsg2gnFObp4LzsyJ/1Iq89uD2M0llmQN/oHg0bZ6tqn4mzvMkjl2hgR6O1c4AjrEv",
	"Dl/pKS3uX20Hzvq2rIzu2iyQD9aUx29/q3vl9EKnImasFxefrmQi1+A8Dwz5ZjwdT+OF0IJRVsuZ/J23",
	"EmabkZuoRoMsgZ/YmznyI5BQeS7YygtaKRIrtQaxCHE3TcH7seQITkWfq6zyqqRNfLK3aOoe/Nt0yj0Z",
	"DYHhaMraXKfsOalIbATSyT2bq3WvZ0e8+k+5ELn2JHDRedCYafGhKJTb7D03cssJ9llWKN3ErEI/gNN7",
	"rnOhTOXaAOWP4/QJfQeorwE8/YHZ5iyMjkFTnV32U49cgHKPmDcvEXSHAEam7ojCBwYl4rPZpWEHzQEe",
	"yqTO3Al0R/8j3DS2FT3aCzXPQRAKUv+AQCOixhAsGY6Q1YqNlyGtPf6VeevH7UPYfDuTPdgiNURgl7qj",
	"3acxrBuQcnAWcx+Bepy9dEfaInluV2ofeqgxtQYdSFsY+6hOHpqVzkqujjAA8TXPt28vjtBCfNlG5Tnj",
	"VAEELt50N/bVh/huWkEnNopq4sYQcS5VuqTRDBK6h/drI+nQtDt6b76HUp2+bqnWymW3VBP5dvp2Pw9a",
	"N4MkFhhMtpuCF3mOd15cbmux4Uqk4EhpI6JAiQIpHnkwP0Otro9WfGBBs5UbXi8NZCJYsUAnqBE+g7XO",
	"guD7VR78tEP1zR872FW/H9cdVXG2quNkuOJQa/F6/gKpEHrdObaNudPpuH2dMb8Y0wEumiSePMS/pzTX",
	"J7MTmJxrDnN6N62iPdJJQ3Po/95FT0+S6eskyXmdk10Ods1eCgwlU7QGt244DS6XM/knpipfoafZu+m7",
	"qYzI1457DSB4wuLkZtkh38syeRiS6Ef+zavdKxE34H5QMQhlMrHQeS4wECdpZ1aIufKQRYe7GLhNYR/m",
	"habIxForYXVKwUH3HrAVWnu4oCGtjBcFkNOpZyiswwJoBaF7SG0gy5vyvwAAAP//zn3gHqsXAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
