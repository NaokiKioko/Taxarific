// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all admins
	// (GET /admin)
	GetAdmin(c *gin.Context)
	// Create an admin
	// (POST /admin)
	PostAdmin(c *gin.Context)
	// Create an employee
	// (POST /admin/employee)
	PostAdminEmployee(c *gin.Context)
	// Get all employees
	// (GET /employee)
	GetEmployee(c *gin.Context)
	// Allows Employees to update certain information
	// (PUT /employee/addcase/{caseid})
	PutEmployeeAddcaseCaseid(c *gin.Context, caseid string)
	// Login a user, employee, or admin
	// (POST /login)
	PostLogin(c *gin.Context)
	// Get all users
	// (GET /user)
	GetUser(c *gin.Context)
	// Create a user
	// (POST /user)
	PostUser(c *gin.Context)
	// Update a user
	// (PUT /user/{userid})
	PutUserUserid(c *gin.Context, userid string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAdmin operation middleware
func (siw *ServerInterfaceWrapper) GetAdmin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAdmin(c)
}

// PostAdmin operation middleware
func (siw *ServerInterfaceWrapper) PostAdmin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAdmin(c)
}

// PostAdminEmployee operation middleware
func (siw *ServerInterfaceWrapper) PostAdminEmployee(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAdminEmployee(c)
}

// GetEmployee operation middleware
func (siw *ServerInterfaceWrapper) GetEmployee(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEmployee(c)
}

// PutEmployeeAddcaseCaseid operation middleware
func (siw *ServerInterfaceWrapper) PutEmployeeAddcaseCaseid(c *gin.Context) {

	var err error

	// ------------- Path parameter "caseid" -------------
	var caseid string

	err = runtime.BindStyledParameterWithOptions("simple", "caseid", c.Param("caseid"), &caseid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter caseid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutEmployeeAddcaseCaseid(c, caseid)
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostLogin(c)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c)
}

// PostUser operation middleware
func (siw *ServerInterfaceWrapper) PostUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUser(c)
}

// PutUserUserid operation middleware
func (siw *ServerInterfaceWrapper) PutUserUserid(c *gin.Context) {

	var err error

	// ------------- Path parameter "userid" -------------
	var userid string

	err = runtime.BindStyledParameterWithOptions("simple", "userid", c.Param("userid"), &userid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutUserUserid(c, userid)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/admin", wrapper.GetAdmin)
	router.POST(options.BaseURL+"/admin", wrapper.PostAdmin)
	router.POST(options.BaseURL+"/admin/employee", wrapper.PostAdminEmployee)
	router.GET(options.BaseURL+"/employee", wrapper.GetEmployee)
	router.PUT(options.BaseURL+"/employee/addcase/:caseid", wrapper.PutEmployeeAddcaseCaseid)
	router.POST(options.BaseURL+"/login", wrapper.PostLogin)
	router.GET(options.BaseURL+"/user", wrapper.GetUser)
	router.POST(options.BaseURL+"/user", wrapper.PostUser)
	router.PUT(options.BaseURL+"/user/:userid", wrapper.PutUserUserid)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYS2/bOBD+KwR3j7Ll7vZQ+JZNiyCLBbaHBnsogoIWxzJbiaPy4cQw9N8XHD0sW7Ij",
	"J2nTQy6BLHE4nO/75sFseYJ5gRq0s3y+5TZZQS7o8ULmSoeHwmABximg15ALlYWHJZpcOD6v30TcbQrg",
	"c26dUTrlZcSVDOv2X0f8fpLipH5ZGJUrp9Yw/XfxFRJ3/b67YKLyAo2jMwi34nOe4jRHnaJcTNGkMT1P",
	"pFFrMPHCoo7bDYP/+wmKQk0SlJCCnsC9M2LiREpxhOV8zr8oGTHMlYO8cBtelhHXIof+wcuIF8LaOzRH",
	"ojrh62vlq+umjLiB714ZkHz+OUBVO45qPG9bQJGgCQe4FBb6jCTCwhcJNjGqcAr14NlpUUVIS5z35HZ4",
	"rXXCeTu4l7dgxu11EGVjOBTbh7zIcANH4qOHgB49/G5gyef8t3gn3rhWbkwYla0DYYzYhN+vun053d5Y",
	"MMO8jmXzlb2XYi/YKL1Ecq9cFr59EvfCqKVKWGDWsouP1zziazCWyg9/M51NZ+HsWIAWheJz/ie9ighS",
	"Ol0smv6SAoG9V8H4FTgmsozRKsvcSji2EmtgSx/eJglYO+XkwYhgcy0rq6pthThtgbquHH/MZqQ41A40",
	"eRNFkamELOMKqKb5ja40pOpepQl47YdywTJlHcNlJ6ApcW59nguz6YUbZE0kfuYVSrdBB2gHcLo0IBww",
	"oSvTBih7GqePaDtAffdg3V8oN2dh9Oix4BFKPxTunmY7hrcHEnfGQ9nTwpuz4jwlgQrDIc6JjITIkcx6",
	"4iFQsjlk/oDAAerLqE6WGLo98gE5NGsrRSjLxCID5pA58Q0YahaaMaPeekIfbVd+1clTdNLCOCCV5tuZ",
	"aoEdM0OC6UrlZIFtFtY1Vhg4SylX4PY08qOL7g7JcwtvG+ix2tsu6EDawriPaiykDIDE2/BXyZKE7gdg",
	"vinksySkb2G+qFxfkmMStRE5ODDhwIfur9+H8MP6ym17iDtlA+Wt9+AytONq5mmSjyeNl/1ciTq0HWbg",
	"7XOVivHz4UHWk+G4FJ/93BT3pIZeikf87extXzutmUbHlui1PJTuRZbhnWUfdjmMtQ+WgHFCaRZmt1Bp",
	"w5ZHdZ1hWt/1B7vKP+EzE5VC2wnDqlSDZL5gSzTMNTPhcDehLV6ii5xoFhE3mMHDXeSR7WP2hAAdfgPd",
	"J+Lv/z6x6lP/qj2guzChsgzTFCRTeqTqyOio4rpSiNpyEjE09fxCevL1he9k5/F0d9hN9qP1dAWOZu9f",
	"d8in0I71GfrYycXq98Mj/lPSr8XrdYYbH6caLhrPmJvnjHxE/4BsmnyLt+HvmFnk0ULypKMbcjNu8nAr",
	"qL01jenIoOGbTV9g0PjRev7Jl42qZB1R3HkTyOlesKenIWWG1WDWjUC8yaiDJCJboXXzd7N3Mx5orA17",
	"hc9bh/noJtFRkuVltB26kp/4T1JtXnexvvnRaZ0JLdlSZRlD70jxnZmLLYQFGQzuguM2H6xf5MoFJtZK",
	"sEIlzhvonqOd0Mrb8v8AAAD//2/cygGmGQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
