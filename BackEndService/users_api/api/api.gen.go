// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all admins
	// (GET /admin)
	GetAdmin(c *gin.Context)
	// Create an admin
	// (POST /admin)
	PostAdmin(c *gin.Context)
	// Create an employee
	// (POST /admin/employee)
	PostAdminEmployee(c *gin.Context)
	// Get all employees
	// (GET /employee)
	GetEmployee(c *gin.Context)
	// Allows Employees to update certain information
	// (PUT /employee/{employeeid})
	PutEmployeeEmployeeid(c *gin.Context, employeeid openapi_types.UUID)
	// Get all users
	// (GET /user)
	GetUser(c *gin.Context)
	// Create a user
	// (POST /user)
	PostUser(c *gin.Context)
	// Update a user
	// (PUT /user/{userid})
	PutUserUserid(c *gin.Context, userid openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAdmin operation middleware
func (siw *ServerInterfaceWrapper) GetAdmin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAdmin(c)
}

// PostAdmin operation middleware
func (siw *ServerInterfaceWrapper) PostAdmin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAdmin(c)
}

// PostAdminEmployee operation middleware
func (siw *ServerInterfaceWrapper) PostAdminEmployee(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAdminEmployee(c)
}

// GetEmployee operation middleware
func (siw *ServerInterfaceWrapper) GetEmployee(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEmployee(c)
}

// PutEmployeeEmployeeid operation middleware
func (siw *ServerInterfaceWrapper) PutEmployeeEmployeeid(c *gin.Context) {

	var err error

	// ------------- Path parameter "employeeid" -------------
	var employeeid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "employeeid", c.Param("employeeid"), &employeeid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter employeeid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutEmployeeEmployeeid(c, employeeid)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c)
}

// PostUser operation middleware
func (siw *ServerInterfaceWrapper) PostUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUser(c)
}

// PutUserUserid operation middleware
func (siw *ServerInterfaceWrapper) PutUserUserid(c *gin.Context) {

	var err error

	// ------------- Path parameter "userid" -------------
	var userid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userid", c.Param("userid"), &userid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutUserUserid(c, userid)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/admin", wrapper.GetAdmin)
	router.POST(options.BaseURL+"/admin", wrapper.PostAdmin)
	router.POST(options.BaseURL+"/admin/employee", wrapper.PostAdminEmployee)
	router.GET(options.BaseURL+"/employee", wrapper.GetEmployee)
	router.PUT(options.BaseURL+"/employee/:employeeid", wrapper.PutEmployeeEmployeeid)
	router.GET(options.BaseURL+"/user", wrapper.GetUser)
	router.POST(options.BaseURL+"/user", wrapper.PostUser)
	router.PUT(options.BaseURL+"/user/:userid", wrapper.PutUserUserid)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXUW/bNhD+KwS3Ry12tz4UfsuyoAiwh2JYnoagYMRzzE4iVd4xmWf4vw88WbJk0bac",
	"plmW9cWQqTse+X13351WMndl5SxYQjlbScwXUCp+PNelsfGh8q4CTwZ4OfegCPRHRfHf3PkyPkmtCH4g",
	"U4LMJC0rkDOJ5I29k+tMQqlM0TOvVxKmRvfsQjA6ZWZVCdFw8CJU+sTjrTPp4XMwHrSc/SE5Hm+ftaes",
	"FOKD81retN7u9hPkFCMyTr8BVs4i/Oz08v+B2QCHC4WQuLpC+KgBc28qMs4mD8BGI2/BtkiKAqb3egTW",
	"pwOQyYDgx515J8Eax1QuXZZV4ZawB0d+MAQlP3zvYS5n8rvJtoInm/KdMBdbkpT3avlYcF518TaAH6nf",
	"b+CPVYFrBD8EUGntAfcUrKHlk1XyM+LV5lXy5cJZ6O1fryQCRC17KkYy+bepEnt9aZlEVg+XyKtk+MWR",
	"uENMXDJ27tjYUBHf/a7+Ut7MTS4iaSjOP1zJTN6DR+6+8s3Z9Gwag7gKrKqMnMmfeCmmAC2YwYlqZr87",
	"4GP3Grh8DyRUUQi2QkELRWKh7kHMQ1zNc0A8kxzBq+hzpWuveqSMuVinEgf7cTpljXWWwHI0VVWFydlz",
	"8gnrmaEW19EaPEjYgR5H7PrXOheFQRJu3rncGcOOoSyVXw6uHrlTdxhLqkbsJmaNwwRmF5zqQtnatQEN",
	"D2P2wWEHtM8BkJryG43XIZjqvdd9fSAfYD0g6c3TBu2TkyCDUdoIhMDAAEWslruU7CCb4GSdbTJ6At35",
	"6ghPjW1NlUGhbgsQ5ASpP0E4K+IgJ3g0OEBcO9F9HQLb7Z+Zw+TclKCxsTuRSdiiliKzS+NBhWoMNyKl",
	"PJzE4nugHn9fW7XSqJ6qXO2l94lXa9CBt4W0j/Bk1TwZveaqCQm4r7nHfXnRhBbuyzYq9yWvSiDw8aS7",
	"sa9+ifemBXRiO1F33Rgi9jHubM3IM5PQ3bxfM1mHsmOfdTcvoaSn/15Jbyab3ZLO5Nvp22GOtG7WkZi7",
	"YPVuep4XhXtAcbmt2YZHkYMnZayIw04kJW65N3fD5hPkoDIEHo62owuaOwtahErMnRfUDFFJTeBvnP/G",
	"FMPX3KcD/LKDY/3/+AxTF3E7wYyGLjbFFrunLxze+pn74JChISPXLHkn9D/GN8FLk9yTVfwdI8iPZiow",
	"UdccZrwC19GOqG9oNn1xyjs+gabPn0CnqS277FXaXnqkEi1ag79v+A6+kDP5q8tVsXBIs3fTd1MZWdg4",
	"DoQiILlytMB2EgPlOlulPgUOfGZu3OsBMeG+dwIRymoxN0UhXCBO4E5/EbcKQUeHhxi4TW8Mt6WhyMS9",
	"UaIyOQUP3XO03Wh4lAtnySiLogTyJkeGovKuBFpA6G6yMZDrm/U/AQAA///vd+LaoxkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
