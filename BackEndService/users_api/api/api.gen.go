// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all admins
	// (GET /admin)
	GetAdmin(c *gin.Context)
	// Create an admin
	// (POST /admin)
	PostAdmin(c *gin.Context)
	// Create an employee
	// (POST /admin/employee)
	PostAdminEmployee(c *gin.Context)
	// Get all cases
	// (GET /case)
	GetCase(c *gin.Context)
	// Create a case
	// (POST /case)
	PostCase(c *gin.Context)
	// Get all pending cases
	// (GET /case/pending)
	GetCasePending(c *gin.Context)
	// Get all employees
	// (GET /employee)
	GetEmployee(c *gin.Context)
	// Allows Employees to update certain information
	// (PUT /employee/addcase/{caseid})
	PutEmployeeAddcaseCaseid(c *gin.Context, caseid string)
	// Login a user, employee, or admin
	// (POST /login)
	PostLogin(c *gin.Context)
	// Get all users
	// (GET /user)
	GetUser(c *gin.Context)
	// Create a user
	// (POST /user)
	PostUser(c *gin.Context)
	// Get a user
	// (GET /user/{userid})
	GetUserUserid(c *gin.Context, userid string)
	// Update a user
	// (PUT /user/{userid})
	PutUserUserid(c *gin.Context, userid string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAdmin operation middleware
func (siw *ServerInterfaceWrapper) GetAdmin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAdmin(c)
}

// PostAdmin operation middleware
func (siw *ServerInterfaceWrapper) PostAdmin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAdmin(c)
}

// PostAdminEmployee operation middleware
func (siw *ServerInterfaceWrapper) PostAdminEmployee(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAdminEmployee(c)
}

// GetCase operation middleware
func (siw *ServerInterfaceWrapper) GetCase(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCase(c)
}

// PostCase operation middleware
func (siw *ServerInterfaceWrapper) PostCase(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCase(c)
}

// GetCasePending operation middleware
func (siw *ServerInterfaceWrapper) GetCasePending(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCasePending(c)
}

// GetEmployee operation middleware
func (siw *ServerInterfaceWrapper) GetEmployee(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEmployee(c)
}

// PutEmployeeAddcaseCaseid operation middleware
func (siw *ServerInterfaceWrapper) PutEmployeeAddcaseCaseid(c *gin.Context) {

	var err error

	// ------------- Path parameter "caseid" -------------
	var caseid string

	err = runtime.BindStyledParameterWithOptions("simple", "caseid", c.Param("caseid"), &caseid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter caseid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutEmployeeAddcaseCaseid(c, caseid)
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostLogin(c)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c)
}

// PostUser operation middleware
func (siw *ServerInterfaceWrapper) PostUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUser(c)
}

// GetUserUserid operation middleware
func (siw *ServerInterfaceWrapper) GetUserUserid(c *gin.Context) {

	var err error

	// ------------- Path parameter "userid" -------------
	var userid string

	err = runtime.BindStyledParameterWithOptions("simple", "userid", c.Param("userid"), &userid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserUserid(c, userid)
}

// PutUserUserid operation middleware
func (siw *ServerInterfaceWrapper) PutUserUserid(c *gin.Context) {

	var err error

	// ------------- Path parameter "userid" -------------
	var userid string

	err = runtime.BindStyledParameterWithOptions("simple", "userid", c.Param("userid"), &userid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutUserUserid(c, userid)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/admin", wrapper.GetAdmin)
	router.POST(options.BaseURL+"/admin", wrapper.PostAdmin)
	router.POST(options.BaseURL+"/admin/employee", wrapper.PostAdminEmployee)
	router.GET(options.BaseURL+"/case", wrapper.GetCase)
	router.POST(options.BaseURL+"/case", wrapper.PostCase)
	router.GET(options.BaseURL+"/case/pending", wrapper.GetCasePending)
	router.GET(options.BaseURL+"/employee", wrapper.GetEmployee)
	router.PUT(options.BaseURL+"/employee/addcase/:caseid", wrapper.PutEmployeeAddcaseCaseid)
	router.POST(options.BaseURL+"/login", wrapper.PostLogin)
	router.GET(options.BaseURL+"/user", wrapper.GetUser)
	router.POST(options.BaseURL+"/user", wrapper.PostUser)
	router.GET(options.BaseURL+"/user/:userid", wrapper.GetUserUserid)
	router.PUT(options.BaseURL+"/user/:userid", wrapper.PutUserUserid)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZX2+juBf9KpZ/P2lfSMjszsMob92ZUdXVSlutptqHUTVy4IZ4BmzGNmmjiu++8gUT",
	"CIaS9O9KfYko2Fz73HPOvaZ3NJJZLgUIo+nyjupoAxnDy7M448Je5ErmoAwHvA0Z46m9WEuVMUOX9Z2A",
	"ml0OdEm1UVwktAwoj+247u2A3s4SOatv5opn3PAtzP9afYfIXHxqD5jxLJfK4BqY2dAlTeQ8kyKR8Wou",
	"VRLi9SxWfAsqXGkpwuaFNv7tTLKczyIZQwJiBrdGsZlhCe7DDqdL+o3HAZEZN5DlZkfLMqCCZdBfeBnQ",
	"nGl9I9XArkZifa9itcOUAVXws+AKYrr8aqGqAwc1ntcNoBKhsQv4yDT0MxIxDd9i0JHiueFSeNeOg3wJ",
	"cc+0YabQ3ueFBuWfe7ALN9C39s9ZnsodDKwfLyw6emB//vBlE4gpxXY2zhs/X46fLsd/g86l0JNy/X8F",
	"a7qk/wv3RhTWLhQi38dyPCmlw5CVnj1caVBvrveaWGUzMsyop+OCvcXFWuJgblL77Au7ZYqveUTsqjQ5",
	"u7ygAd2C0mi89N18MV/YKDIHwXJOl/Q3vBVgMnHFIXOVNQFMc8e76TkYwtKU4ChNzIYZsmFbIOvC3o0i",
	"0HpOMYJids5FXM2qCrZFuMIKg/26WKDupDAgMBrL85RHODOsUuTK/mRdokZ6urR4dbdyRlKuDZHr1obm",
	"CLUusoypXW+7VlBIn6+0QunaMlBqD04fFTADhIlqqgNKj+N0KXULqJ8FaPO7jHdHYXSyNZygsUPJdNTS",
	"mnh9IC6jCih7XHh31D7HKFBh6Ms5JiPC5MREF5gHm5LdYeYPEuhJfRnUYgmh3T3cQwc3tmIE14StUiBG",
	"EsN+AJGC2DaFYCUa4UfTr7zx5CE8aWD0UMU9O5ItsM+MjzBR3SSPmitmv+WtKwBBdLHKuLELWe2QJH6f",
	"xa7kOWzW3/7cZ7M1sf0uW/Vfe+AQrPs9FuftHbaPFkO8/HJq8HoMFb2+w84+XPflQX+tzy2+ikB9wtj7",
	"R4kO89+njZNbmIOILUZHyI4pIPU0spaqUbVuOfWg/C7reK9XhW5ro2rsDPLD2y58o9C28HPwHlP3zsF0",
	"Kt5To9o7Kh6NcLPhIXSbAS1kGzi76IYsjpHId/aXxyUaT+GB+yqPH6XNKBq4z6rQHzEwlmrFMjCg7IIP",
	"w198stvfu3GziBuue9Kxh4zqDOlaChq5KF0TClrpO3S968e07omO1XVaJ4cJ3rl43salQDb0PDSg7xfv",
	"+9xppglpyFoWIj6k7lmayhtNPre9sIpBIlCGcUHsidT2j/aVg7xOZVJ/u/WW9T/t47pm76u65omAmBQ5",
	"+rFxJ11/UcdXvERvPNICB1TJFDya1aCCBtSASEXcEXC8xJ/YPS8egISRP0D0t/DHP19I9ai/Zg9B7Y5J",
	"KpMEYsLFRHripEFqtjkTNL6DYLL6LBjQsKi/no2WKmytW833ZOKdg8FPD8/1jeP04lSfHvyFCR+2xFv9",
	"PaELf4BeG9zejrIvIsajuu2iStYhP5zAwjv7W3cpw0o7lS61yq4wxrSGxGygjiZJAmag+SjcG49sPp6o",
	"wncVPpA354UneeY+DX61jzWYJ4u9eFD2qm7jkRP4X/CcZz6aTyLfce3lOBc7vPKZix0NauuIUqgUq37E",
	"0o3UZvlh8WFBbTrrib0iVWgjs8mFvcUoTcvgzvcVeeSfH/X0uvPoTx88ihEmYrLmaUpkYZD5rYaarJiG",
	"2E64sYEbXew/dW05IzmPTKGgvY6m/e4v5aL1euPe2jq2pel+OU14F/kX7YuG56Hyuvw3AAD//zMEAaS9",
	"IQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
